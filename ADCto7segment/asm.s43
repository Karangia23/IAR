#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
Results     equ    0200h                ; Begining of Results table
        
        ORG 0FFEEh
        DC16 ADC12_Interrupt
        
        ORG     0FFE8h                  
        DC16    PORT1_isr               ; set PORT1 Interrupt vector
        
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment


init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

ADC_Setup:
        bis.b   #BIT1,&P6SEL            ; Enable A/D channel A1
        mov     #SHT0_8+MSC+ADC12ON,&ADC12CTL0
        mov     #SHP+CONSEQ_2,&ADC12CTL1
        mov.b   #INCH_1,ADC12MCTL0      ; A1 goes to MEM0
        mov     #BIT0,&ADC12IE          ; Enable ADC12IFG.1 for ADC12MEM0
        clr     R8                      ; Clear results table pointer
Port1_and_Port2_Setup:
        MOV.B   #255,P2DIR              ; ustaw wszystkie piny portu nr 2 jako wyjscia
        MOV.B   #0,P2OUT                ; ustaw wszystkie piny na stan niski
        MOV.B   #1, P1IE                ; zezwolenie na przerwanie z pinu P1.0 
        MOV.B   #1, P1IES               ; ustaw zbocze opadajace wyzwalajace przerwanie na P1.0 
        BIC.B   #1, P1IFG               ; Skasuj flage przerwania od P1.0

        bis     #ENC,&ADC12CTL0         ; Enable conversions
        bis     #ADC12SC,&ADC12CTL0     ; Start conversions
        bis     #GIE,SR                 ; Enable interrupts

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
ADC12_Interrupt:
        mov     &ADC12MEM0,Results(R8)  ; Move result, IFG is reset
        incd    R8                      ; Increment results table pointer
        and     #0Eh,R8                 ; Modulo pointer
HandleConversionTo7seg:
        call    #MultiplyBy33
        call    #DivideBy4096
        MOV R9, R4
        call    #number_to_7_segment
        bic     #ENC,&ADC12CTL0         ; Disable conversions
        bic     #ADC12SC,&ADC12CTL0     ; Stop conversions       
        reti 
        
PORT1_Interrupt:
        bis     #ENC,&ADC12CTL0         ; Enable conversions
        bis     #ADC12SC,&ADC12CTL0     ; Start conversions
        BIC.B   #1,   P1IFG             ; Skasuj flage jako potwierdzenie obslugi przerwania
        RETI
        
                           
        
MultiplyBy33:
        MOV @R8,&MPY ; Zaladuj pierwsza wartosc wybierajac rejestr odpowiedzialny za mnozenie bez znaku
        MOV #33,&OP2 ; Zaladuj druga wartosc 
        NOP         ; Poczekaj jeden cykl na az wynik zostanie zaladowany do rejestr�w RESLO i RESHI
        MOV RESLO,R9 ; pobierz mlodsze 16 bit�w wyniku
        MOV RESHI,R10 ; pobierz starsze 16 bit�w wyniku
        RET

DivideBy4096:
        MOV #12, R12
for_loop1:
        RRA R10
        RRC R9
decrement:        
        DEC     R12        
        JN     end_for    
        JMP    for_loop1 
end_for:
        RET
        
number_to_7_segment:
        PUSH R4
        PUSH R5
        PUSH R6
        PUSH R7
        MOV #0,R7
        MOV #0,R5
        MOV R4,R6
decimal_loop:
        CMP #10,R6
        JNC  display
        ADD #10, R5
        INC R7
        SUB #10, R6
        JMP decimal_loop     
display:        
        SUB R5,R4
        RLA R7
        RLA R7
        RLA R7
        RLA R7
        ADD R7,R4
        MOV.B R4, P2OUT
        POP R7
        POP R6
        POP R5
        POP R4
        RET

        END